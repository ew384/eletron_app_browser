{
  "name": "electron-browser-manager",
  "version": "1.0.0",
  "description": "极简多浏览器实例管理应用",
  "main": "dist/main/index.js",
  "scripts": {
    "dev": "concurrently \"npm run dev:main\" \"npm run dev:renderer\"",
    "dev:main": "tsc -p tsconfig.main.json && electron dist/main/index.js --inspect=5858",
    "dev:renderer": "vite",
    "build": "npm run build:main && npm run build:renderer",
    "build:main": "tsc -p tsconfig.main.json",
    "build:renderer": "vite build",
    "package": "npm run build && electron-builder",
    "package:win": "npm run build && electron-builder --win",
    "package:mac": "npm run build && electron-builder --mac",
    "package:linux": "npm run build && electron-builder --linux"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.0.0",
    "autoprefixer": "^10.4.0",
    "concurrently": "^8.0.0",
    "electron": "^27.0.0",
    "electron-builder": "^24.0.0",
    "eslint": "^8.0.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.0",
    "postcss": "^8.4.0",
    "tailwindcss": "^3.3.0",
    "typescript": "^5.0.0",
    "vite": "^4.4.0"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "zustand": "^4.4.0"
  },
  "build": {
    "appId": "com.example.browser-manager",
    "productName": "Browser Manager",
    "directories": {
      "output": "release"
    },
    "files": [
      "dist/**/*",
      "node_modules/**/*"
    ],
    "mac": {
      "category": "public.app-category.productivity"
    },
    "win": {
      "target": "nsis"
    },
    "linux": {
      "target": "AppImage"
    }
  }
}

---FILE_SEPARATOR---
// tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@shared/*": ["src/shared/*"]
    }
  },
  "include": ["src/renderer/**/*", "src/shared/**/*", "src/preload/**/*"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

---FILE_SEPARATOR---
// tsconfig.main.json
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "target": "ES2020",
    "module": "CommonJS",
    "noEmit": false,
    "outDir": "dist",
    "lib": ["ES2020"]
  },
  "include": ["src/main/**/*", "src/shared/**/*", "src/preload/**/*"],
  "exclude": ["src/renderer/**/*"]
}

---FILE_SEPARATOR---
// tsconfig.node.json
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}

---FILE_SEPARATOR---
// vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  root: './src/renderer',
  base: './',
  build: {
    outDir: path.resolve(__dirname, 'dist/renderer'),
    emptyOutDir: true
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, 'src'),
      '@shared': path.resolve(__dirname, 'src/shared')
    }
  },
  server: {
    port: 3000
  }
});

---FILE_SEPARATOR---
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./src/renderer/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

---FILE_SEPARATOR---
// src/shared/types.ts
/**
 * 核心类型定义 - 简洁设计，预留扩展接口
 */

export interface BrowserAccount {
  id: string;
  name: string;
  status: 'idle' | 'running' | 'error';
  createdAt: number;
  updatedAt?: number;
}

export interface BrowserInstance {
  accountId: string;
  windowId: number;
  status: 'starting' | 'running' | 'stopped';
  url?: string;
}

// 预留扩展接口 - 配置驱动架构
export interface AccountConfig {
  proxy?: ProxyConfig;
  userAgent?: string;
  viewport?: ViewportConfig;
  // 预留指纹配置接口
  fingerprint?: FingerprintConfig;
  // 预留行为配置接口
  behavior?: BehaviorConfig;
}

export interface ProxyConfig {
  type: 'http' | 'https' | 'socks5';
  host: string;
  port: number;
  username?: string;
  password?: string;
}

export interface ViewportConfig {
  width: number;
  height: number;
  deviceScaleFactor?: number;
}

// 预留接口 - 策略模式扩展点
export interface FingerprintConfig {
  canvas?: any;
  webgl?: any;
  audio?: any;
  fonts?: any;
}

export interface BehaviorConfig {
  mouseMovement?: any;
  typingPattern?: any;
  scrollPattern?: any;
}

// IPC 通信类型
export interface IpcResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
}

// 窗口管理器状态
export interface WindowManagerState {
  mainWindow?: Electron.BrowserWindow;
  browserInstances: Map<string, Electron.BrowserWindow>;
}

---FILE_SEPARATOR---
// src/shared/constants.ts
/**
 * 全局常量配置
 */

export const APP_CONFIG = {
  name: '防关联浏览器',
  version: '1.0.0',
  author: 'Browser Manager Team'
} as const;

export const WINDOW_CONFIG = {
  main: {
    width: 1200,
    height: 800,
    minWidth: 800,
    minHeight: 600
  },
  browser: {
    width: 1280,
    height: 720,
    minWidth: 800,
    minHeight: 600
  }
} as const;

export const IPC_CHANNELS = {
  // 账号管理
  CREATE_ACCOUNT: 'create-account',
  DELETE_ACCOUNT: 'delete-account',
  UPDATE_ACCOUNT: 'update-account',
  GET_ACCOUNTS: 'get-accounts',
  
  // 浏览器实例管理
  CREATE_BROWSER_INSTANCE: 'create-browser-instance',
  DESTROY_BROWSER_INSTANCE: 'destroy-browser-instance',
  GET_INSTANCE_STATUS: 'get-instance-status',
  
  // 预留扩展通道
  INJECT_FINGERPRINT: 'inject-fingerprint',
  UPDATE_PROXY: 'update-proxy',
  EXECUTE_BEHAVIOR: 'execute-behavior'
} as const;

export const DEFAULT_USER_AGENTS = [
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
  'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
] as const;

---FILE_SEPARATOR---
// src/preload/index.ts
/**
 * 预加载脚本 - 安全的IPC桥接
 */
import { contextBridge, ipcRenderer } from 'electron';
import { IPC_CHANNELS } from '@shared/constants';
import type { BrowserAccount, AccountConfig, IpcResponse } from '@shared/types';

// 定义安全的API接口
const electronAPI = {
  // 账号管理
  createBrowserInstance: (accountId: string, config?: AccountConfig): Promise<IpcResponse> =>
    ipcRenderer.invoke(IPC_CHANNELS.CREATE_BROWSER_INSTANCE, accountId, config),
  
  destroyBrowserInstance: (accountId: string): Promise<IpcResponse> =>
    ipcRenderer.invoke(IPC_CHANNELS.DESTROY_BROWSER_INSTANCE, accountId),
  
  getInstanceStatus: (accountId: string): Promise<IpcResponse<string>> =>
    ipcRenderer.invoke(IPC_CHANNELS.GET_INSTANCE_STATUS, accountId),
  
  // 预留扩展方法
  injectFingerprint: (accountId: string, fingerprint: any): Promise<IpcResponse> =>
    ipcRenderer.invoke(IPC_CHANNELS.INJECT_FINGERPRINT, accountId, fingerprint),
  
  updateProxy: (accountId: string, proxy: any): Promise<IpcResponse> =>
    ipcRenderer.invoke(IPC_CHANNELS.UPDATE_PROXY, accountId, proxy),
  
  executeBehavior: (accountId: string, behavior: any): Promise<IpcResponse> =>
    ipcRenderer.invoke(IPC_CHANNELS.EXECUTE_BEHAVIOR, accountId, behavior),
  
  // 应用信息
  getAppVersion: (): Promise<string> =>
    ipcRenderer.invoke('get-app-version'),
  
  // 窗口控制
  minimizeWindow: (): void =>
    ipcRenderer.send('minimize-window'),
  
  maximizeWindow: (): void =>
    ipcRenderer.send('maximize-window'),
  
  closeWindow: (): void =>
    ipcRenderer.send('close-window')
};

// 类型安全的API暴露
declare global {
  interface Window {
    electronAPI: typeof electronAPI;
  }
}

// 安全暴露API到渲染进程
contextBridge.exposeInMainWorld('electronAPI', electronAPI);

---FILE_SEPARATOR---
// src/main/index.ts
/**
 * 主进程入口 - 应用生命周期管理
 */
import { app, BrowserWindow } from 'electron';
import path from 'path';
import { WindowManager } from './window-manager';
import { setupIpcHandlers } from './ipc-handlers';

class App {
  private windowManager: WindowManager;
  private isDev: boolean;

  constructor() {
    this.isDev = process.env.NODE_ENV === 'development';
    this.windowManager = new WindowManager(this.isDev);
    this.init();
  }

  private async init(): Promise<void> {
    // 等待应用就绪
    await app.whenReady();
    
    // 设置IPC处理器
    setupIpcHandlers(this.windowManager);
    
    // 创建主窗口
    await this.windowManager.createMainWindow();
    
    // 开发环境优化
    if (this.isDev) {
      this.setupDevtools();
    }
    
    this.setupAppEventHandlers();
  }

  private setupDevtools(): void {
    // 安装开发者工具扩展
    app.whenReady().then(() => {
      // 可以在这里安装React DevTools等扩展
    });
  }

  private setupAppEventHandlers(): void {
    // 窗口全部关闭时退出应用 (macOS除外)
    app.on('window-all-closed', () => {
      if (process.platform !== 'darwin') {
        app.quit();
      }
    });

    // macOS重新激活时创建窗口
    app.on('activate', async () => {
      if (BrowserWindow.getAllWindows().length === 0) {
        await this.windowManager.createMainWindow();
      }
    });

    // 应用即将退出时清理资源
    app.on('before-quit', () => {
      this.windowManager.cleanup();
    });

    // 安全策略：阻止新窗口创建
    app.on('web-contents-created', (_, contents) => {
      contents.on('new-window', (event) => {
        event.preventDefault();
      });
    });
  }
}

// 启动应用
new App();

---FILE_SEPARATOR---
// src/main/window-manager.ts
/**
 * 窗口管理器 - 策略模式设计，预留扩展接口
 */
import { BrowserWindow, screen } from 'electron';
import path from 'path';
import { WINDOW_CONFIG, DEFAULT_USER_AGENTS } from '@shared/constants';
import type { AccountConfig, BrowserInstance, WindowManagerState } from '@shared/types';

export class WindowManager {
  private state: WindowManagerState = {
    browserInstances: new Map()
  };
  
  private isDev: boolean;

  constructor(isDev = false) {
    this.isDev = isDev;
  }

  /**
   * 创建主控制窗口
   */
  async createMainWindow(): Promise<BrowserWindow> {
    const { width, height, minWidth, minHeight } = WINDOW_CONFIG.main;
    
    const mainWindow = new BrowserWindow({
      width,
      height,
      minWidth,
      minHeight,
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        preload: path.join(__dirname, '../preload/index.js')
      },
      titleBarStyle: 'default',
      show: false // 先隐藏，加载完成后显示
    });

    // 加载应用界面
    if (this.isDev) {
      await mainWindow.loadURL('http://localhost:3000');
      mainWindow.webContents.openDevTools();
    } else {
      await mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'));
    }

    // 优雅显示窗口
    mainWindow.once('ready-to-show', () => {
      mainWindow.show();
    });

    this.state.mainWindow = mainWindow;
    this.setupMainWindowHandlers(mainWindow);
    
    return mainWindow;
  }

  /**
   * 创建浏览器实例 - 使用策略模式，支持配置注入
   */
  async createBrowserInstance(accountId: string, config?: AccountConfig): Promise<BrowserInstance> {
    const { width, height } = config?.viewport || WINDOW_CONFIG.browser;
    
    // 应用配置策略
    const browserConfig = this.buildBrowserConfig(accountId, config);
    
    const browserWindow = new BrowserWindow({
      width,
      height,
      webPreferences: browserConfig.webPreferences,
      show: false
    });

    // 应用用户代理策略
    if (config?.userAgent) {
      browserWindow.webContents.setUserAgent(config.userAgent);
    } else {
      // 随机选择默认User-Agent
      const randomUA = DEFAULT_USER_AGENTS[Math.floor(Math.random() * DEFAULT_USER_AGENTS.length)];
      browserWindow.webContents.setUserAgent(randomUA);
    }

    // 应用代理策略 (预留)
    if (config?.proxy) {
      await this.applyProxyConfig(browserWindow, config.proxy);
    }

    // 预留指纹注入点
    if (config?.fingerprint) {
      await this.injectFingerprint(browserWindow, config.fingerprint);
    }

    // 导航到起始页面
    await browserWindow.loadURL('https://www.google.com');
    
    browserWindow.show();
    this.state.browserInstances.set(accountId, browserWindow);
    this.setupBrowserInstanceHandlers(browserWindow, accountId);

    return {
      accountId,
      windowId: browserWindow.id,
      status: 'running',
      url: browserWindow.webContents.getURL()
    };
  }

  /**
   * 构建浏览器配置 - 策略模式
   */
  private buildBrowserConfig(accountId: string, config?: AccountConfig) {
    return {
      webPreferences: {
        partition: `persist:${accountId}`, // 数据隔离
        preload: path.join(__dirname, '../preload/index.js'),
        nodeIntegration: false,
        contextIsolation: true,
        webSecurity: true,
        // 预留注入点
        additionalArguments: this.buildChromiumArgs(config)
      }
    };
  }

  /**
   * 构建Chromium启动参数 - 预留扩展点
   */
  private buildChromiumArgs(config?: AccountConfig): string[] {
    const args: string[] = [];
    
    // 基础参数
    args.push('--disable-web-security');
    args.push('--disable-features=VizDisplayCompositor');
    
    // 预留指纹参数注入点
    if (config?.fingerprint) {
      // 后续实现指纹相关参数
    }
    
    return args;
  }

  /**
   * 应用代理配置 - 策略模式预留
   */
  private async applyProxyConfig(window: BrowserWindow, proxyConfig: any): Promise<void> {
    // 预留代理配置实现
    console.log('Applying proxy config:', proxyConfig);
  }

  /**
   * 注入指纹配置 - 策略模式预留
   */
  private async injectFingerprint(window: BrowserWindow, fingerprint: any): Promise<void> {
    // 预留指纹注入实现
    console.log('Injecting fingerprint:', fingerprint);
  }

  /**
   * 销毁浏览器实例
   */
  destroyInstance(accountId: string): boolean {
    const window = this.state.browserInstances.get(accountId);
    if (window && !window.isDestroyed()) {
      window.close();
      this.state.browserInstances.delete(accountId);
      return true;
    }
    return false;
  }

  /**
   * 获取实例状态
   */
  getInstanceStatus(accountId: string): string | undefined {
    const window = this.state.browserInstances.get(accountId);
    if (!window || window.isDestroyed()) {
      return 'stopped';
    }
    return window.isVisible() ? 'running' : 'starting';
  }

  /**
   * 获取所有实例
   */
  getAllInstances(): Map<string, BrowserWindow> {
    return this.state.browserInstances;
  }

  /**
   * 设置主窗口事件处理器
   */
  private setupMainWindowHandlers(window: BrowserWindow): void {
    window.on('closed', () => {
      this.state.mainWindow = undefined;
    });

    // 预留主窗口特殊处理
  }

  /**
   * 设置浏览器实例事件处理器
   */
  private setupBrowserInstanceHandlers(window: BrowserWindow, accountId: string): void {
    window.on('closed', () => {
      this.state.browserInstances.delete(accountId);
    });

    // 预留实例状态监控
    window.webContents.on('did-navigate', (event, url) => {
      console.log(`Instance ${accountId} navigated to: ${url}`);
    });
  }

  /**
   * 清理资源
   */
  cleanup(): void {
    // 关闭所有浏览器实例
    this.state.browserInstances.forEach((window, accountId) => {
      if (!window.isDestroyed()) {
        window.close();
      }
    });
    this.state.browserInstances.clear();

    // 关闭主窗口
    if (this.state.mainWindow && !this.state.mainWindow.isDestroyed()) {
      this.state.mainWindow.close();
    }
  }
}

---FILE_SEPARATOR---
// src/main/ipc-handlers.ts
/**
 * IPC处理器 - 主进程与渲染进程通信桥梁
 */
import { ipcMain } from 'electron';
import { IPC_CHANNELS, APP_CONFIG } from '@shared/constants';
import type { WindowManager } from './window-manager';
import type { IpcResponse, AccountConfig } from '@shared/types';

export function setupIpcHandlers(windowManager: WindowManager): void {
  // 浏览器实例管理
  ipcMain.handle(
    IPC_CHANNELS.CREATE_BROWSER_INSTANCE,
    async (event, accountId: string, config?: AccountConfig): Promise<IpcResponse> => {
      try {
        const instance = await windowManager.createBrowserInstance(accountId, config);
        return {
          success: true,
          data: instance
        };
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }
  );

  ipcMain.handle(
    IPC_CHANNELS.DESTROY_BROWSER_INSTANCE,
    async (event, accountId: string): Promise<IpcResponse> => {
      try {
        const success = windowManager.destroyInstance(accountId);
        return {
          success,
          data: success
        };
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }
  );

  ipcMain.handle(
    IPC_CHANNELS.GET_INSTANCE_STATUS,
    async (event, accountId: string): Promise<IpcResponse<string>> => {
      try {
        const status = windowManager.getInstanceStatus(accountId);
        return {
          success: true,
          data: status
        };
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }
  );

  // 预留扩展处理器
  ipcMain.handle(
    IPC_CHANNELS.INJECT_FINGERPRINT,
    async (event, accountId: string, fingerprint: any): Promise<IpcResponse> => {
      try {
        // 预留指纹注入实现
        console.log('Fingerprint injection requested for:', accountId, fingerprint);
        return {
          success: true,
          data: 'Fingerprint injection completed'
        };
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }
  );

  ipcMain.handle(
    IPC_CHANNELS.UPDATE_PROXY,
    async (event, accountId: string, proxy: any): Promise<IpcResponse> => {
      try {
        // 预留代理更新实现
        console.log('Proxy update requested for:', accountId, proxy);
        return {
          success: true,
          data: 'Proxy update completed'
        };
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }
  );

  ipcMain.handle(
    IPC_CHANNELS.EXECUTE_BEHAVIOR,
    async (event, accountId: string, behavior: any): Promise<IpcResponse> => {
      try {
        // 预留行为执行实现
        console.log('Behavior execution requested for:', accountId, behavior);
        return {
          success: true,
          data: 'Behavior execution completed'
        };
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }
  );

  // 应用信息
  ipcMain.handle('get-app-version', async (): Promise<string> => {
    return APP_CONFIG.version;
  });

  // 窗口控制
  ipcMain.on('minimize-window', (event) => {
    const window = windowManager.getAllInstances().get('main') || 
                   require('electron').BrowserWindow.getFocusedWindow();
    window?.minimize();
  });

  ipcMain.on('maximize-window', (event) => {
    const window = windowManager.getAllInstances().get('main') || 
                   require('electron').BrowserWindow.getFocusedWindow();
    if (window?.isMaximized()) {
      window.restore();
    } else {
      window?.maximize();
    }
  });

  ipcMain.on('close-window', (event) => {
    const window = windowManager.getAllInstances().get('main') || 
                   require('electron').BrowserWindow.getFocusedWindow();
    window?.close();
  });
}

---FILE_SEPARATOR---
// src/renderer/App.tsx
/**
 * 主应用组件 - React入口
 */
import React from 'react';
import { AccountList } from './components/AccountList';
import { Header } from './components/Header';
import { StatusBar } from './components/StatusBar';
import { useAccountStore } from './stores/accountStore';

export default function App() {
  const { accounts, createAccount, isLoading } = useAccountStore();

  return (
    <div className="h-screen bg-gray-900 text-white flex flex-col">
      <Header />
      
      <main className="flex-1 p-6 overflow-auto">
        <div className="max-w-6xl mx-auto">
          {/* 快速操作区 */}
          <div className="mb-6">
            <button 
              onClick={createAccount}
              disabled={isLoading}
              className="px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 
                         rounded-lg font-medium transition-colors duration-200
                         flex items-center space-x-2"
            >
              {isLoading ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  <span>创建中...</span>
                </>
              ) : (
                <>
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                  </svg>
                  <span>创建账号</span>
                </>
              )}
            </button>
          </div>
          
          {/* 账号列表区 */}
          <div className="bg-gray-800 rounded-xl p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">账号管理</h2>
              <span className="text-gray-400 text-sm">
                共 {accounts.length} 个账号
              </span>
            </div>
            
            <AccountList accounts={accounts} />
          </div>
        </div>
      </main>
      
      <StatusBar />
    </div>
  );
}

---FILE_SEPARATOR---
// src/renderer/components/Header.tsx
/**
 * 应用头部组件
 */
import React from 'react';
import { APP_CONFIG } from '@shared/constants';

export function Header() {
  return (
    <header className="bg-gray-800 border-b border-gray-700 px-6 py-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                    d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
          </div>
          <div>
            <h1 className="text-xl font-bold">{APP_CONFIG.name}</h1>
            <p className="text-gray-400 text-sm">v{APP_CONFIG.version}</p>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          <button
            onClick={() => window.electronAPI?.minimizeWindow()}
            className="p-2 hover:bg-gray-700 rounded-lg transition-colors"
            title="最小化"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
            </svg>
          </button>
          <button
            onClick={() => window.electronAPI?.maximizeWindow()}
            className="p-2 hover:bg-gray-700 rounded-lg transition-colors"
            title="最大化"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                    d="M4 8V4a2 2 0 012-2h12a2 2 0 012 2v4M4 16v4a2 2 0 002 2h12a2 2 0 002-2v-4" />
            </svg>
          </button>
          <button
            onClick={() => window.electronAPI?.closeWindow()}
            className="p-2 hover:bg-red-600 rounded-lg transition-colors"
            title="关闭"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    </header>
  );
}

---FILE_SEPARATOR---
// src/renderer/components/AccountList.tsx
/**
 * 账号列表组件 - 支持批量操作和状态管理
 */
import React from 'react';
import { AccountCard } from './AccountCard';
import type { BrowserAccount } from '@shared/types';

interface AccountListProps {
  accounts: BrowserAccount[];
}

export function AccountList({ accounts }: AccountListProps) {
  if (accounts.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
        </div>
        <h3 className="text-lg font-medium text-gray-300 mb-2">暂无账号</h3>
        <p className="text-gray-400">点击"创建账号"按钮开始使用</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {accounts.map((account) => (
        <AccountCard key={account.id} account={account} />
      ))}
    </div>
  );
}

---FILE_SEPARATOR---
// src/renderer/components/AccountCard.tsx
/**
 * 账号卡片组件 - 单个账号的管理界面
 */
import React, { useState } from 'react';
import { useAccountStore } from '../stores/accountStore';
import type { BrowserAccount } from '@shared/types';

interface AccountCardProps {
  account: BrowserAccount;
}

export function AccountCard({ account }: AccountCardProps) {
  const { updateAccount, startInstance, stopInstance, deleteAccount } = useAccountStore();
  const [isLoading, setIsLoading] = useState(false);

  const getStatusColor = (status: BrowserAccount['status']) => {
    switch (status) {
      case 'running':
        return 'bg-green-500';
      case 'error':
        return 'bg-red-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getStatusText = (status: BrowserAccount['status']) => {
    switch (status) {
      case 'running':
        return '运行中';
      case 'error':
        return '错误';
      default:
        return '空闲';
    }
  };

  const handleStart = async () => {
    setIsLoading(true);
    try {
      await startInstance(account.id);
    } finally {
      setIsLoading(false);
    }
  };

  const handleStop = async () => {
    setIsLoading(true);
    try {
      await stopInstance(account.id);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    if (window.confirm(`确定要删除账号 "${account.name}" 吗？`)) {
      await deleteAccount(account.id);
    }
  };

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleString('zh-CN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="bg-gray-700 rounded-lg p-4 hover:bg-gray-650 transition-colors">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="relative">
            <div className="w-12 h-12 bg-gray-600 rounded-lg flex items-center justify-center">
              <svg className="w-6 h-6 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            </div>
            <div className={`absolute -bottom-1 -right-1 w-4 h-4 ${getStatusColor(account.status)} rounded-full border-2 border-gray-700`} />
          </div>
          
          <div>
            <h3 className="font-medium text-white">{account.name}</h3>
            <div className="flex items-center space-x-4 text-sm text-gray-400">
              <span>状态: {getStatusText(account.status)}</span>
              <span>创建: {formatDate(account.createdAt)}</span>
            </div>
          </div>
        </div>

        <div className="flex items-center space-x-2">
          {account.status === 'running' ? (
            <button
              onClick={handleStop}
              disabled={isLoading}
              className="px-4 py-2 bg-red-600 hover:bg-red-700 disabled:bg-red-800 
                         rounded-md text-sm font-medium transition-colors"
            >
              {isLoading ? '停止中...' : '停止'}
            </button>
          ) : (
            <button
              onClick={handleStart}
              disabled={isLoading}
              className="px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-green-800 
                         rounded-md text-sm font-medium transition-colors"
            >
              {isLoading ? '启动中...' : '启动'}
            </button>
          )}
          
          <button
            onClick={handleDelete}
            className="p-2 text-gray-400 hover:text-red-400 hover:bg-red-900/20 
                       rounded-md transition-colors"
            title="删除账号"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
}

---FILE_SEPARATOR---
// src/renderer/components/StatusBar.tsx
/**
 * 状态栏组件 - 显示应用状态信息
 */
import React, { useEffect, useState } from 'react';
import { useAccountStore } from '../stores/accountStore';

export function StatusBar() {
  const { accounts } = useAccountStore();
  const [appVersion, setAppVersion] = useState('');

  useEffect(() => {
    window.electronAPI?.getAppVersion().then(setAppVersion);
  }, []);

  const runningCount = accounts.filter(account => account.status === 'running').length;
  const totalCount = accounts.length;

  return (
    <footer className="bg-gray-800 border-t border-gray-700 px-6 py-3">
      <div className="flex items-center justify-between text-sm text-gray-400">
        <div className="flex items-center space-x-6">
          <span>运行实例: {runningCount}/{totalCount}</span>
          <span>内存占用: 计算中...</span>
          <span className="flex items-center space-x-1">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
            <span>系统正常</span>
          </span>
        </div>
        
        <div className="flex items-center space-x-4">
          <span>v{appVersion}</span>
          <span>{new Date().toLocaleTimeString('zh-CN')}</span>
        </div>
      </div>
    </footer>
  );
}

---FILE_SEPARATOR---
// src/renderer/stores/accountStore.ts
/**
 * 账号状态管理 - Zustand轻量级状态管理
 */
import { create } from 'zustand';
import type { BrowserAccount, AccountConfig } from '@shared/types';

interface AccountStore {
  // 状态
  accounts: BrowserAccount[];
  isLoading: boolean;
  error: string | null;
  
  // 基础操作
  createAccount: () => Promise<void>;
  updateAccount: (id: string, updates: Partial<BrowserAccount>) => void;
  deleteAccount: (id: string) => Promise<void>;
  
  // 实例管理
  startInstance: (accountId: string, config?: AccountConfig) => Promise<void>;
  stopInstance: (accountId: string) => Promise<void>;
  
  // 预留扩展方法
  updateFingerprint: (accountId: string, fingerprint: any) => Promise<void>;
  updateProxy: (accountId: string, proxy: any) => Promise<void>;
  executeBehavior: (accountId: string, behavior: any) => Promise<void>;
  
  // 工具方法
  clearError: () => void;
  refreshAccounts: () => Promise<void>;
}

export const useAccountStore = create<AccountStore>((set, get) => ({
  // 初始状态
  accounts: [],
  isLoading: false,
  error: null,

  // 创建账号
  createAccount: async () => {
    set({ isLoading: true, error: null });
    
    try {
      const newAccount: BrowserAccount = {
        id: `account_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        name: `账号 ${get().accounts.length + 1}`,
        status: 'idle',
        createdAt: Date.now()
      };
      
      set(state => ({ 
        accounts: [...state.accounts, newAccount],
        isLoading: false
      }));
      
      // 成功提示
      console.log('账号创建成功:', newAccount.name);
      
    } catch (error) {
      set({ 
        error: error instanceof Error ? error.message : '创建账号失败',
        isLoading: false 
      });
    }
  },

  // 更新账号
  updateAccount: (id, updates) => {
    set(state => ({
      accounts: state.accounts.map(account => 
        account.id === id 
          ? { ...account, ...updates, updatedAt: Date.now() }
          : account
      )
    }));
  },

  // 删除账号
  deleteAccount: async (id) => {
    set({ isLoading: true, error: null });
    
    try {
      // 先停止实例
      await get().stopInstance(id);
      
      set(state => ({
        accounts: state.accounts.filter(account => account.id !== id),
        isLoading: false
      }));
      
      console.log('账号删除成功:', id);
      
    } catch (error) {
      set({ 
        error: error instanceof Error ? error.message : '删除账号失败',
        isLoading: false 
      });
    }
  },

  // 启动实例
  startInstance: async (accountId, config) => {
    const { updateAccount } = get();
    
    try {
      updateAccount(accountId, { status: 'idle' });
      
      const response = await window.electronAPI?.createBrowserInstance(accountId, config);
      
      if (response?.success) {
        updateAccount(accountId, { status: 'running' });
        console.log('浏览器实例启动成功:', accountId);
      } else {
        throw new Error(response?.error || '启动失败');
      }
      
    } catch (error) {
      updateAccount(accountId, { status: 'error' });
      set({ error: error instanceof Error ? error.message : '启动实例失败' });
      throw error;
    }
  },

  // 停止实例
  stopInstance: async (accountId) => {
    const { updateAccount } = get();
    
    try {
      const response = await window.electronAPI?.destroyBrowserInstance(accountId);
      
      if (response?.success) {
        updateAccount(accountId, { status: 'idle' });
        console.log('浏览器实例停止成功:', accountId);
      } else {
        throw new Error(response?.error || '停止失败');
      }
      
    } catch (error) {
      set({ error: error instanceof Error ? error.message : '停止实例失败' });
      throw error;
    }
  },

  // 预留扩展方法
  updateFingerprint: async (accountId, fingerprint) => {
    try {
      const response = await window.electronAPI?.injectFingerprint(accountId, fingerprint);
      if (!response?.success) {
        throw new Error(response?.error || '指纹更新失败');
      }
      console.log('指纹更新成功:', accountId);
    } catch (error) {
      set({ error: error instanceof Error ? error.message : '指纹更新失败' });
      throw error;
    }
  },

  updateProxy: async (accountId, proxy) => {
    try {
      const response = await window.electronAPI?.updateProxy(accountId, proxy);
      if (!response?.success) {
        throw new Error(response?.error || '代理更新失败');
      }
      console.log('代理更新成功:', accountId);
    } catch (error) {
      set({ error: error instanceof Error ? error.message : '代理更新失败' });
      throw error;
    }
  },

  executeBehavior: async (accountId, behavior) => {
    try {
      const response = await window.electronAPI?.executeBehavior(accountId, behavior);
      if (!response?.success) {
        throw new Error(response?.error || '行为执行失败');
      }
      console.log('行为执行成功:', accountId);
    } catch (error) {
      set({ error: error instanceof Error ? error.message : '行为执行失败' });
      throw error;
    }
  },

  // 工具方法
  clearError: () => {
    set({ error: null });
  },

  refreshAccounts: async () => {
    // 预留账号刷新逻辑
    console.log('刷新账号列表');
  }
}));

---FILE_SEPARATOR---
// src/renderer/index.html
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>防关联浏览器</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
        sans-serif;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    
    /* 自定义滚动条样式 */
    ::-webkit-scrollbar {
      width: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: #374151;
    }
    
    ::-webkit-scrollbar-thumb {
      background: #6B7280;
      border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: #9CA3AF;
    }
  </style>
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/main.tsx"></script>
</body>
</html>

---FILE_SEPARATOR---
// src/renderer/main.tsx
/**
 * React应用入口文件
 */
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

// 开发环境错误边界
if (process.env.NODE_ENV === 'development') {
  // 可以添加错误报告工具
}

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

---FILE_SEPARATOR---
// src/renderer/index.css
/**
 * 全局样式文件
 */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* 基础样式重置 */
@layer base {
  * {
    box-sizing: border-box;
  }
  
  html, body, #root {
    height: 100%;
    margin: 0;
    padding: 0;
  }
  
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    background-color: #111827;
    color: #F9FAFB;
  }
}

/* 自定义组件样式 */
@layer components {
  .btn-primary {
    @apply px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg font-medium transition-colors duration-200;
  }
  
  .btn-secondary {
    @apply px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg font-medium transition-colors duration-200;
  }
  
  .card {
    @apply bg-gray-800 rounded-xl p-6 shadow-lg;
  }
}

/* 工具样式 */
@layer utilities {
  .text-shadow {
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .scrollbar-thin {
    scrollbar-width: thin;
    scrollbar-color: #6B7280 #374151;
  }
  
  .scrollbar-thin::-webkit-scrollbar {
    width: 8px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-track {
    background: #374151;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background-color: #6B7280;
    border-radius: 4px;
  }
}

---FILE_SEPARATOR---
// README.md
# Electron多浏览器管理应用

一个基于Electron + React + TypeScript的极简多浏览器实例管理应用，支持账号隔离和扩展配置。

## ✨ 特性

- 🚀 **现代化技术栈**: Electron 27+ + React 18 + TypeScript + Vite
- 🎨 **美观界面**: Tailwind CSS + 深色主题
- 📦 **轻量状态管理**: Zustand
- 🔒 **数据隔离**: 每个账号独立的浏览器会话
- 🔧 **易于扩展**: 策略模式设计，预留指纹伪装等扩展接口
- ⚡ **快速开发**: 热更新 + TypeScript严格模式

## 🏗️ 项目结构

```
src/
├── main/                 # 主进程
│   ├── index.ts         # 应用入口
│   ├── window-manager.ts # 窗口管理器
│   └── ipc-handlers.ts  # IPC处理器
├── renderer/            # 渲染进程
│   ├── App.tsx         # 主组件
│   ├── components/     # UI组件
│   └── stores/         # 状态管理
├── shared/             # 共享代码
│   ├── types.ts       # 类型定义
│   └── constants.ts   # 常量配置
└── preload/           # 预加载脚本
    └── index.ts
```

## 🚀 快速开始

### 安装依赖
```bash
npm install
```

### 开发模式
```bash
npm run dev
```

### 构建应用
```bash
npm run build
```

### 打包应用
```bash
# 全平台
npm run package

# Windows
npm run package:win

# macOS  
npm run package:mac

# Linux
npm run package:linux
```

## 🎯 核心功能

### 1. 账号管理
- ✅ 创建/删除账号
- ✅ 账号状态管理 (空闲/运行中/错误)
- ✅ 账号列表展示

### 2. 浏览器实例管理  
- ✅ 独立浏览器窗口创建
- ✅ 数据隔离 (使用partition)
- ✅ 实例启动/停止控制

### 3. 扩展接口 (预留)
- 🔄 指纹伪装配置
- 🔄 代理配置
- 🔄 自动化行为脚本
- 🔄 AI集成接口

## 🔧 配置说明

### 类型定义
所有核心类型定义在 `src/shared/types.ts`，包含：
- `BrowserAccount`: 账号基础信息
- `AccountConfig`: 账号配置选项 
- `FingerprintConfig`: 指纹配置 (预留)
- `BehaviorConfig`: 行为配置 (预留)

### 常量配置
应用配置在 `src/shared/constants.ts`，包含：
- 窗口尺寸配置
- IPC通信频道
- 默认User-Agent列表

## 🏛️ 架构设计

### 策略模式
- 窗口管理器使用策略模式，支持不同的浏览器配置策略
- 预留指纹注入、代理配置等扩展点

### 状态管理
- 使用Zustand进行轻量级状态管理
- 集中管理账号状态和实例控制逻辑

### IPC通信
- 安全的主进程-渲染进程通信
- 类型安全的API设计

## 🔒 安全特性

- Context Isolation启用
- Node Integration禁用  
- 安全的preload脚本
- 数据隔离 (partition)

## 📈 扩展计划

### Phase 1 (当前)
- ✅ 基础架构搭建
- ✅ 账号管理界面
- ✅ 浏览器实例创建

### Phase 2 (下一步)
- 🔄 指纹伪装配置界面
- 🔄 代理配置功能
- 🔄 用户行为录制/回放

### Phase 3 (未来)
- 🔄 AI自动化集成
- 🔄 批量操作功能
- 🔄 数据导入/导出

## 🛠️ 开发指南

### 添加新功能
1. 在 `shared/types.ts` 中定义相关类型
2. 在 `main/` 中实现主进程逻辑
3. 在 `renderer/` 中实现UI组件
4. 通过IPC进行通信

### 扩展配置
1. 修改 `AccountConfig` 接口
2. 在 `WindowManager` 中实现配置应用逻辑
3. 在UI中添加相应的配置选项

## 📄 许可证

MIT License

## 🤝 贡献

欢迎提交Issue和Pull Request！

---

**验收标准**:
- ✅ `npm run dev` 启动开发环境
- ✅ 显示主界面，有"创建账号"按钮  
- ✅ 点击按钮能弹出基础的浏览器窗口
- ✅ 代码结构清晰，易于理解和修改